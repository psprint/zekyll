# Helper functions {{{
pinfo()   { print -- "${fg_bold[green]}$*$reset_color"; }
pinfon()  { print -n -- "${fg_bold[green]}$*$reset_color"; }
pinfo2()  { print -- "${fg_bold[yellow]}$*$reset_color"; }
pinfo2n() { print -n -- "${fg_bold[yellow]}$*$reset_color"; }
perror()  { print -- "${fg_bold[red]}$*$reset_color" >&2; }
perrorn() { print -n -- "${fg_bold[red]}$*$reset_color" >&2; }

qprint()  { quiet || print -- "$*"; }
qprintn() { quiet || print -n -- "$*"; }
qinfo()   { quiet || print -- "${fg_bold[green]}$*$reset_color"; }
qinfon()  { quiet || print -n -- "${fg_bold[green]}$*$reset_color"; }
qinfo2()  { quiet || print -- "${fg_bold[yellow]}$*$reset_color"; }
qinfo2n() { quiet || print -n -- "${fg_bold[yellow]}$*$reset_color"; }
qerror()  { quiet || print -- "${fg_bold[red]}$*$reset_color" >&2; }
qerrorn() { quiet || print -n -- "${fg_bold[red]}$*$reset_color" >&2; }

clearinput() { repeat 10; do read -rs -k 1 -t; done; }
# }}}
# Standard outputs {{{
dry-mode-msg() { [ "$ZKL_PERFORM_WRITE" = "0" ] && pinfo2 "= Dry mode =" || perror "= Actual mode (not-dry) ="; }
help-opts()  { pinfo "Options are:"; }
help-cd()    { print -- "-c/--cd             -- ask for working directory, otherwise it's current directory"; }
help-dry()   { print -- "-w/--write          -- actual operation mode - else it is always dry-run mode"; }
help-git()   { print -- "-g/--git            -- perform operations with git (to update repository not just files)"; }
help-path()  { print -- "-p/--path [path]    -- work in given path (don't ask for it)"; }
help-zkl()   { print -- "-z/--zkl [zekylls]  -- process given zekylls"; }
help-zkls()  { print -- "-z/--zkl [zekylls]  -- source zekylls"; }
help-zkld()  { print -- "-Z/--Zkl [zekylls]  -- destination zekylls"; }
help-dft()   { print -- "-d/--default        -- use \$ZEKYLL_DEFAULT_REPO if available as path specification (don't ask)"; }
help-repo()  { print -- "-r/--repo           -- use given repo as path specification (don't ask)"; }
help-index() { print -- "-i/--index [index]  -- work on given index"; }
help-rsize() { print -- "-s/--size [size]    -- resize to given size"; }
help-quiet() { print -- "-q/--quiet          -- try to not output any messages, just do the job"; }
help-verb()  { print -- "-v/--verbose        -- be more verbose"; }
help-nansi() { print -- "-n/--noansi         -- don't use colors in output"; }
help-sect()  { print -- "--section           -- use given section name when e.g. creating zekylls"; }
help-desc()  { print -- "--desc              -- use given description when e.g. creating zekylls"; }
help-cons()  { print -- "--consistent        -- check if index is consistent, output inconsistent files/zekylls"; }
help-list()  { print -- "--list              -- list files belonging to index, even inconsistent ones"; }
# }}}
# FUNCTION: quiet {{{
# Returns if quiet mode
quiet() {
    [ "$ZKL_QUIET" = "0" ] && return 1 || return 0
}
# }}}
# FUNCTION: src {{{
# Returns if source zekylls given
src() {
    [ -z "$ZKL_ZEKYLLS" ] && return 1 || return 0
}
# 2}}}
# FUNCTION: tgt {{{
# Returns if target zekylls given
tgt() {
    [ -z "$ZKL_TARGET_ZEKYLLS" ] && return 1 || return 0
}
# }}}
# FUNCTION: noansi {{{
# Turns colors on and off
noansi() {
    if [ "$ZKL_NOANSI" = "1" ]; then
        local k
        for k in "${(@k)fg}"; do
            fg[$k]=""
        done
        for k in "${(@k)fg_bold}"; do
            fg_bold[$k]=""
        done
        reset_color=""
        for k in "${(@k)ZKLCOL}"; do
            ZKLCOL[$k]=""
        done
    fi
}
# }}}
# FUNCTION: detect_duplicates {{{
# Detects duplicates in given array
detect_duplicates() {
    local -a sorted
    sorted=( "${(on)@}" )

    integer dups=0

    local prev="" i
    for i in "${sorted[@]}"; do
        if [ "$prev" = "$i" ]; then
            quiet || echo "Duplicate zekyll found: $i" >&2
            dups=1
        fi
        prev="$i"
    done

    return $dups
}
# }}}
# FUNCTION: read_destination_path {{{
# Read destination path
read_destination_path() {
    local zekylls_path="$1"

    while (( 1 )); do
        pinfo "Where are zekylls located? (default: current directory \".\"):"

        vared -cp "Enter path: " zekylls_path

        if [ -z "$zekylls_path" ]; then
            zekylls_path="."
        fi

        # Expand ~
        zekylls_path="${zekylls_path/(#s)~/$HOME}"

        if ! test -d "$zekylls_path"; then
            perror "Path doesn't exist, try again"
            continue
        fi

        break
    done

    REPLY="$zekylls_path"
    return 0
}
# }}}
# FUNCTION: read_repo {{{
# Read repository spec
read_repo() {
    local repo_spec="$1"

    while (( 1 )); do
        vared -cp "Enter user/name or just user: " repo_spec

        if [[ "$repo_spec" != [a-zA-Z0-9][a-zA-Z0-9-]#[/][a-zA-Z0-9_-]##/[a-zA-Z0-9_-]## && 
                "$repo_spec" != [a-zA-Z0-9][a-zA-Z0-9-]#[/][a-zA-Z0-9_-]## &&
                    "$repo_spec" != [a-zA-Z0-9][a-zA-Z0-9-]# ]]; then
            perror "Incorrect repository spec. It can contain letters, numbers, underscores and hyphens, and is in format: {user}/{repo}/{rev} or {user}/{repo} or {user}"
            continue
        fi

        get_path_from_repo "$repo_spec"
        if ! test -d "$REPLY"; then
            perror "Repository ${REPLY:t} doesn't exist, try again"
            continue
        fi

        break
    done

    REPLY="$repo_spec"

    return 0
}
# }}}
# FUNCTION: resolve_path {{{
# Resolves path according to various rules and sources
resolve_path() {
    # If -d/--default is given, then this means: do exactly the
    # same but without prompting for path, but fallback to this
    # if ZEKYLL_DEFAULT_REPO is empty (or when ZKL_PATH is set
    # meaning user provided a path; this is used in zkl-mv where
    # prompt might be demanded even with path provided, via -c
    # option; other tools don't call this function when they
    # already have path)

    integer ask=1
    [ "$ZKL_DEFAULT" = 1 ] && ask=0
    [[ -z "$ZEKYLL_DEFAULT_REPO" || -n "$ZKL_PATH" ]] && ask=1

    [[ -n "$ZEKYLL_DEFAULT_REPO" && -z "$ZKL_PATH" ]] && { get_path_from_repo "$ZEKYLL_DEFAULT_REPO"; ZKL_PATH="$REPLY"; }

    (( ask )) && { read_destination_path "$ZKL_PATH" || return 1 }

    return 0
}
# }}}
# FUNCTION: resolve_repo {{{
# This function translates repo to path, but
# also asks for the repo if conditions are
# meet
resolve_repo() {
    integer ask=1
    [[ "$ZKL_DEFAULT" = 1 && -n "$ZEKYLL_DEFAULT_REPO" ]] && ask=0
    [ -n "$ZKL_REPO" ] && ask=0

    # -r/--repo has precedence
    local repo="$ZEKYLL_DEFAULT_REPO"
    [ -n "$ZKL_REPO" ] && repo="$ZKL_REPO"

    if (( ask )); then
        # Will propose the repo (if it's set)
        read_repo "$repo" || return 1
        repo="$REPLY"
    fi

    get_path_from_repo "$repo"
    [ -d "$REPLY" ] && return 0 || return 1
}
# }}}
# FUNCTION: cd_will_work_on {{{
# CD to path and show files there
cd_will_work_on() {
    [ -d "$1" ] || { perror "Error: path '$1' doesn't exist"; return 1 }

    cd "$1"

    # Silent mode
    [ "$2" = "-s" ] && return 0

    print
    pinfo2 "Will work on following files:"
    print

    local -a listing
    listing=( "${(@f)"$( ls -1 | pr -3 -e8 -f -l 1000 -t)"}" )
    listing=( "${listing[@]:#*$'\C-L'*}" )
    print -rl -- "${listing[@]}"

    print

    return 0
}
# }}}
# FUNCTION: get_path_from_repo {{{
# Returns physicall path for given repo string
get_path_from_repo() {
    local site="gh" user repo="zkl" rev="master"

    # user/repo/rev
    if [[ "$1" = (#b)([a-zA-Z0-9][a-zA-Z0-9-]#)[/]([a-zA-Z0-9_-]##)[/]([a-zA-Z0-9_-]##) ]]; then
        user="${match[1]}"
        repo="${match[2]}"
        rev="${match[3]}"
    # user/repo
    elif [[ "$1" = (#b)([a-zA-Z0-9][a-zA-Z0-9-]#)[/]([a-zA-Z0-9_-]##) ]]; then
        user="${match[1]}"
        repo="${match[2]}"
    # user
    elif [[ "$1" = (#b)([a-zA-Z0-9][a-zA-Z0-9-]#) ]]; then
        user="${match[1]}"

    # xy@...

    # xy@user/repo/rev
    elif [[ "$1" = (#b)([a-zA-Z][a-zA-Z])[@]([a-zA-Z0-9][a-zA-Z0-9-]#)[/]([a-zA-Z0-9_-]##)[/]([a-zA-Z0-9_-]##) ]]; then
        site="${match[1]}"
        user="${match[2]}"
        repo="${match[3]}"
        rev="${match[4]}"
    # xy@user/repo
    elif [[ "$1" = (#b)([a-zA-Z][a-zA-Z])[@]([a-zA-Z0-9][a-zA-Z0-9-]#)[/]([a-zA-Z0-9_-]##) ]]; then
        site="${match[1]}"
        user="${match[2]}"
        repo="${match[3]}"
    # xy@user
    elif [[ "$1" = (#b)([a-zA-Z][a-zA-Z])[@]([a-zA-Z0-9][a-zA-Z0-9-]#) ]]; then
        site="${match[1]}"
        user="${match[2]}"

    else
        perror "Incorrect repository spec. It can contain letters, numbers, underscores and hyphens, and is in format: {user}/{repo}/{rev} or {user}/{repo} or {user}"
        return 1
    fi

    REPLY="$ZKL_REPOS_DIR/${site}---${user}---${repo}---${rev}"
    return 0
}
# }}}
# FUNCTION: filter_for_existing_zekylls {{{
# Iterates over given zekylls, rejects non-existing ones,
# saves file names (returned in reply2) and sections (reply3)
filter_for_existing_zekylls() {
    local -a existing sections files
    local zekyll
    for zekyll in "$@"; do
        zekyll_file=( ${zekyll}.[A-Z]--*(N.) )
        if [[ "$#zekyll_file" -eq 0 ]]; then
            perror "No such zekyll $zekyll"
        else
            existing+=( "$zekyll" )
            files+=( "${zekyll_file[1]}" )

            if [[ "${zekyll_file[1]}" = (#b)${zekyll}.([A-Z])--* ]]; then
                sections+=( "${match[1]}" )
            else
                sections+=( "" )
                perror "Warning: suspicious zekyll $zekyll, it has no section assigned"
            fi
        fi
    done

    typeset -ga reply2 reply3
    echo "T1 ${(t)reply} T2 ${(t)reply2} T3 ${(t)reply3}"
    reply=( "${existing[@]}" )
    reply2=( "${files[@]}" )
    reply3=( "${sections[@]}" )
}
# }}}
# FUNCTION: three_to_section_order {{{
# Converts lists of zekylls, files and sections into
# section order
three_to_section_order() {
    local -a zekylls files sections out_zekylls out_files out_sections
    integer size="$1"
    shift

    zekylls=( "${@[1,size]}" ) ; files=( "${@[1+size,size*2]}" ) ; sections=( "${@[1+2*size,size*3]}" )

    integer a i secsize="${#section_letters}"
    for (( a=1; a<=secsize; a++ )); do
        selected_section="${section_letters[a]}"
        for (( i=1; i<=size; i++ )); do
            [ "$selected_section" != "${sections[i]#.}" ] && continue

            out_zekylls+=( "${zekylls[i]}" )
            out_files+=( "${files[i]}" )
            out_sections+=( "${sections[i]}" )
        done
    done

    typeset -ga reply2 reply3
    reply=( "${out_zekylls[@]}" ) ; reply2=( "${out_files[@]}" ) ; reply3=( "${out_sections[@]}" )
}
# }}}

# vim:ft=zsh
